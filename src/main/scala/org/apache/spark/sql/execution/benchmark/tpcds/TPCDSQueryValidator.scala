/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.sql.execution.benchmark.tpcds

import java.io.File
import java.nio.file.Paths

import com.codahale.metrics.{ExponentiallyDecayingReservoir, Histogram, MetricRegistry}

import org.apache.spark.SparkConf
import org.apache.spark.metrics.source.CodegenMetrics._
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.execution.benchmark.Utils._

object TPCDSQueryValidator {

  private val regenerateGoldenFiles = System.getenv("SPARK_GENERATE_GOLDEN_FILES") == "1"

  val conf = new SparkConf()
      .setAppName("validate-tpcds-queries")
      .set("spark.sql.parquet.compression.codec", "snappy")
      .set("spark.sql.shuffle.partitions", "4")
      .set("spark.driver.extraJavaOptions", "-XX:+UseG1GC")
      .set("spark.sql.autoBroadcastJoinThreshold", (20 * 1024 * 1024).toString)
      // Since Spark 3.0, `spark.sql.crossJoin.enabled` is true by default
      .set("spark.sql.crossJoin.enabled", "true")

  val spark = SparkSession.builder.config(conf).getOrCreate()

  val tables = Seq("catalog_page", "catalog_returns", "customer", "customer_address",
    "customer_demographics", "date_dim", "household_demographics", "inventory", "item",
    "promotion", "store", "store_returns", "catalog_sales", "web_sales", "store_sales",
    "web_returns", "web_site", "reason", "call_center", "warehouse", "ship_mode", "income_band",
    "time_dim", "web_page")

  def setupTables(dataLocation: String): Unit = {
    tables.foreach { tableName =>
      spark.read.parquet(s"$dataLocation/$tableName").createOrReplaceTempView(tableName)
      tableName -> spark.table(tableName).count()
    }
  }

  private lazy val genClassMetricHistogram =
    metricRegistry.histogram(MetricRegistry.name("generatedClassSize"))
  private lazy val genMethodMetricHistogram =
    metricRegistry.histogram(MetricRegistry.name("generatedMethodSize"))

  private def refreshHistogramMetrics(): Unit = {
    Seq(genClassMetricHistogram, genMethodMetricHistogram).foreach { hist =>
      val clazz = hist.getClass
      val field = clazz.getDeclaredField("reservoir")
      field.setAccessible(true)
      field.set(hist, new ExponentiallyDecayingReservoir())
    }
  }

  private def metricAsString(h: Histogram): String = {
    val metric = h.getSnapshot
    s"${metric.getMean},${metric.getMax},${metric.get75thPercentile()}"
  }

  def validateTpcdsTests(dataLocation: String, queries: Seq[String]): Unit = {
    setupTables(dataLocation)
    queries.foreach { name =>
      // Reset metrics for codegen
      refreshHistogramMetrics()

      val queryString = resourceToString(s"tpcds/queries/$name.sql")
      val output = formatOutput(
        df = spark.sql(queryString),
        _numRows = 100000,
        truncate = Int.MaxValue,
        vertical = true
      ).trim

      val header = s"-- Automatically generated by ${getClass.getSimpleName}"

      // Read expected results from resource files
      val expectedOutput = (if (regenerateGoldenFiles) {
        val basePath = Paths.get("src", "main", "resources", "tpcds", "results").toFile
        val resultFile = new File(basePath, s"$name.sql.out")
        val goldenOutput =
          s"""$header
             |$output
           """.stripMargin
        val parent = resultFile.getParentFile
        if (!parent.exists()) {
          assert(parent.mkdirs(), "Could not create directory: " + parent)
        }
        stringToFile(resultFile, goldenOutput)
        fileToString(resultFile)
      } else {
        resourceToString(s"tpcds/results/$name.sql.out")
      }).replace(s"$header\n", "").trim

      // scalastyle:off println
      println(s"===== TPCDS QUERY VALIDATION RESULTS FOR $name =====")
      if (expectedOutput == output) {
        println("- result check: PASSED")
      } else {
        println(
          s"""- result check: FAILED
             |expected:
             |$expectedOutput
             |actual:
             |$output
           """.stripMargin)
      }
      println(
        s"""- codegen metrics
           |classes:${metricAsString(genClassMetricHistogram)}
           |methods:${metricAsString(genMethodMetricHistogram)}
         """.stripMargin)
      // scalastyle:on println
    }
  }

  def main(args: Array[String]): Unit = {
    val benchmarkArgs = new TPCDSQueryValidatorArguments(args)

    // List of all TPC-DS queries
    val tpcdsQueries = Seq(
      "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "q10", "q11",
      "q12", "q13", "q14a", "q14b", "q15", "q16", "q17", "q18", "q19", "q20",
      "q21", "q22", "q23a", "q23b", "q24a", "q24b", "q25", "q26", "q27", "q28", "q29", "q30",
      "q31", "q32", "q33", "q34", "q35", "q36", "q37", "q38", "q39a", "q39b", "q40",
      "q41", "q42", "q43", "q44", "q45", "q46", "q47", "q48", "q49", "q50",
      "q51", "q52", "q53", "q54", "q55", "q56", "q57", "q58", "q59", "q60",
      "q61", "q62", "q63", "q64", "q65", "q66", "q67", "q68", "q69", "q70",
      "q71", "q72", "q73", "q74", "q75", "q76", "q77", "q78", "q79", "q80",
      "q81", "q82", "q83", "q84", "q85", "q86", "q87", "q88", "q89", "q90",
      "q91", "q92", "q93", "q94", "q95", "q96", "q97", "q98", "q99")

    // If `--query-filter` defined, filters the queries that this option selects
    val queriesToRun = if (benchmarkArgs.queryFilter.nonEmpty) {
      val queries = tpcdsQueries.filter { case queryName =>
        benchmarkArgs.queryFilter.contains(queryName)
      }
      if (queries.isEmpty) {
        throw new RuntimeException(
          s"Empty queries to run. Bad query name filter: ${benchmarkArgs.queryFilter}")
      }
      queries
    } else {
      tpcdsQueries
    }

    validateTpcdsTests(benchmarkArgs.dataLocation, queries = queriesToRun)
  }
}
